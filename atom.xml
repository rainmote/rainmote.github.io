<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雨中尘埃</title>
  
  <subtitle>吾生也有涯，而知也无涯</subtitle>
  <link href="http://www.rainmote.cn/atom.xml" rel="self"/>
  
  <link href="http://www.rainmote.cn/"/>
  <updated>2021-08-23T03:53:51.699Z</updated>
  <id>http://www.rainmote.cn/</id>
  
  <author>
    <name>rainmote</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux使用Expect做自动化交互</title>
    <link href="http://www.rainmote.cn/2021/08/23/linux-expect-automated-interaction/"/>
    <id>http://www.rainmote.cn/2021/08/23/linux-expect-automated-interaction/</id>
    <published>2021-08-23T03:02:19.000Z</published>
    <updated>2021-08-23T03:53:51.699Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="背景"   >          <a href="#背景" class="heading-link"><i class="fas fa-link"></i></a><a href="#背景" class="headerlink" title="背景"></a>背景</h1>      <p>在Linux进行ssh多次登录，sudo输入切换用户，打开screen/tmux时需要多次输入重复命令，思考如何解决重复性输入问题，经过探索找到了Expect脚本，其主要是用TCL语法（在网络仿真模拟中有用到过）。本文主要真对上述场景遇到的问题和基本语法做介绍，另外读者可以通过给出的资料文档进一步探索。</p>        <h1 id="简介"   >          <a href="#简介" class="heading-link"><i class="fas fa-link"></i></a><a href="#简介" class="headerlink" title="简介"></a>简介</h1>      <p>维基百科: <span class="exturl"><a class="exturl__link"   href="https://en.wikipedia.org/wiki/Expect" >Expect</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>SourceForge: <span class="exturl"><a class="exturl__link"   href="http://expect.sourceforge.net/" >The Expect Home Page</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="TCL语法"   >          <a href="#TCL语法" class="heading-link"><i class="fas fa-link"></i></a><a href="#TCL语法" class="headerlink" title="TCL语法"></a>TCL语法</h1>      <p>由于Expect是建立在TCL语言基础上的一个工具，首先看一些TCL常见语法。</p>        <h2 id="变量"   >          <a href="#变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#变量" class="headerlink" title="变量"></a>变量</h2>      <p>一般用于保存hostname/username/password</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个变量</span></span><br><span class="line"><span class="built_in">set</span> username <span class="string">&quot;leo&quot;</span></span><br><span class="line"><span class="built_in">set</span> hostname <span class="string">&quot;domain.local&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取命令行参数(与bash不同的是第一个参数index为0)</span></span><br><span class="line"><span class="comment">## 获取第一个参数</span></span><br><span class="line"><span class="built_in">set</span> hostname [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="comment">## 获取第二个参数</span></span><br><span class="line"><span class="built_in">set</span> passwrod [lindex <span class="variable">$argv</span> 1]</span><br></pre></td></tr></table></div></figure>        <h2 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组" class="headerlink" title="数组"></a>数组</h2>      <p>一般用于保存服务器列表，显示并供用户选择</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个数组</span></span><br><span class="line"><span class="built_in">set</span> host_list(0) &#123;host1 127.0.0.1 root&#125;</span><br><span class="line"><span class="built_in">set</span> host_list(1) &#123;host2 192.168.1.1 admin&#125;</span><br><span class="line"><span class="built_in">set</span> host_list(2) &#123;host3 8.8.8.8 dns&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组长度</span></span><br><span class="line"><span class="built_in">set</span> arrlen [array size host_list]</span><br></pre></td></tr></table></div></figure>        <h2 id="获取用户输入"   >          <a href="#获取用户输入" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h2>      <p>一般用于接收用户输入选择，如密码、服务器等</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭终端回显，用于保证输入密码安全</span></span><br><span class="line">system stty -<span class="built_in">echo</span></span><br><span class="line"><span class="comment"># 发送给用户，提示输入密码</span></span><br><span class="line">send_user <span class="string">&quot;please input password:&quot;</span></span><br><span class="line"><span class="comment"># 获取用户输入</span></span><br><span class="line">expect_user -re <span class="string">&quot;(.*)\n&quot;</span></span><br><span class="line"><span class="comment"># 将用户输入存入变量</span></span><br><span class="line"><span class="built_in">set</span> password <span class="variable">$expect_out</span>(1, string)</span><br><span class="line"><span class="comment"># 打开终端回显</span></span><br><span class="line">system stty <span class="built_in">echo</span></span><br></pre></td></tr></table></div></figure>        <h2 id="if条件分支"   >          <a href="#if条件分支" class="heading-link"><i class="fas fa-link"></i></a><a href="#if条件分支" class="headerlink" title="if条件分支"></a>if条件分支</h2>      <p>用于逻辑判断</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断变量是否相等，相等返回0，否则返回1</span></span><br><span class="line">[string compare <span class="variable">$host</span> <span class="string">&quot;123&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个参数</span></span><br><span class="line"><span class="built_in">set</span> host [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="keyword">if</span> ![string compare <span class="variable">$host</span> <span class="string">&quot;&quot;</span>] &#123; <span class="comment">#注意化括号前必须有一个空格，具体参考TCL语言规范</span></span><br><span class="line">  <span class="comment"># 如果host变量为空字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expect_user -re <span class="string">&quot;(.*)\n&quot;</span></span><br><span class="line"><span class="built_in">set</span> choose <span class="variable">$expect_out</span>(1,string)</span><br><span class="line"><span class="keyword">if</span> &#123;[string compare [string toupper <span class="variable">$choose</span>] <span class="string">&quot;N&quot;</span>] == 0&#125; &#123;</span><br><span class="line">  <span class="comment"># 如果choose变量为&quot;N&quot;</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line">&#125; elseif &#123;[scan <span class="variable">$choose</span> &#123;%[0-9]&#125; choose] == 0&#125; &#123;</span><br><span class="line">  <span class="comment"># 如果choose不是数字，scan用户匹配，详情参考TCL语法</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line">&#125; elseif &#123; <span class="variable">$choose</span> &lt; 0 || <span class="variable">$choose</span> &gt;= <span class="variable">$len</span> &#125; &#123;</span><br><span class="line">  <span class="comment"># 输入非法，退出</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="for循环"   >          <a href="#for循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> len [array size host_list]</span><br><span class="line"><span class="keyword">for</span> &#123;<span class="built_in">set</span> index 0&#125; &#123;<span class="variable">$index</span> &lt; <span class="variable">$len</span>&#125; &#123;incr index&#125; &#123;</span><br><span class="line">  puts <span class="string">&quot;<span class="variable">$index</span> -&gt; <span class="variable">$host_list</span>(<span class="variable">$index</span>)&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># incr为自增关键字，puts用于输出给用户，类似send_user</span></span><br></pre></td></tr></table></div></figure>        <h1 id="Expect应用介绍"   >          <a href="#Expect应用介绍" class="heading-link"><i class="fas fa-link"></i></a><a href="#Expect应用介绍" class="headerlink" title="Expect应用介绍"></a>Expect应用介绍</h1>              <h2 id="接受窗口改变信号"   >          <a href="#接受窗口改变信号" class="heading-link"><i class="fas fa-link"></i></a><a href="#接受窗口改变信号" class="headerlink" title="接受窗口改变信号"></a>接受窗口改变信号</h2>      <p>如果是用expect登录后，是用screen或tmux，在用户终端大小调整情况下，因为窗口大小改变信号为同步到远程服务器会导致内容错乱。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">trap</span> &#123;</span><br><span class="line">  <span class="built_in">set</span> rows [stty rows]</span><br><span class="line">  <span class="built_in">set</span> cols [stty columns]</span><br><span class="line">  stty rows <span class="variable">$rows</span> columns <span class="variable">$cols</span> &lt; <span class="variable">$spawn_out</span>(slave,name)</span><br><span class="line">&#125; WINCH</span><br></pre></td></tr></table></div></figure>        <h2 id="ssh自动登录"   >          <a href="#ssh自动登录" class="heading-link"><i class="fas fa-link"></i></a><a href="#ssh自动登录" class="headerlink" title="ssh自动登录"></a>ssh自动登录</h2>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置timeout时间为10秒</span></span><br><span class="line"><span class="built_in">set</span> timeout 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行ssh命令,登录远程服务器</span></span><br><span class="line">spawn ssh <span class="variable">$username</span>@<span class="variable">$hostname</span></span><br><span class="line"><span class="comment"># 匹配服务器返回的信息</span></span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue &#125;</span><br><span class="line">  <span class="string">&quot;passsword&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span>; exp_continue &#125;</span><br><span class="line">  <span class="string">&quot;$&quot;</span> &#123; send <span class="string">&quot;hostname\r&quot;</span> &#125; <span class="comment"># 登录后发送hostname，用于debug</span></span><br><span class="line">  <span class="string">&quot;Permission denied&quot;</span> &#123; send_user <span class="string">&quot;Permission denied (publickey,password).&quot;</span>; <span class="built_in">exit</span> &#125;</span><br><span class="line">  incorrent &#123; puts <span class="string">&quot;Invalid account or password!&quot;</span>; <span class="built_in">exit</span> &#125;</span><br><span class="line">  timeout &#123; puts <span class="string">&quot;Connection to <span class="variable">$hostname</span> timeout!&quot;</span>; <span class="built_in">exit</span> &#125;</span><br><span class="line">  eof &#123; puts <span class="string">&quot;Connection to <span class="variable">$hostname</span> failed: <span class="variable">$expect_out</span>(buffer)&quot;</span>; <span class="built_in">exit</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否登录成功</span></span><br><span class="line">expect &#123;</span><br><span class="line">  <span class="string">&quot;\\\$&quot;</span> &#123; send <span class="string">&quot;whoami\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录screen</span></span><br><span class="line">sleep 0.2</span><br><span class="line">send <span class="string">&quot;script /dev/null\r&quot;</span></span><br><span class="line">expect <span class="string">&quot;Script started&quot;</span></span><br><span class="line">sleep 0.2</span><br><span class="line">send <span class="string">&quot;screen -ls\r&quot;</span></span><br><span class="line">expect &#123;</span><br><span class="line">  -re <span class="string">&quot;.*Detached&quot;</span> &#123; send <span class="string">&quot;screen -r <span class="variable">$username</span>\r&quot;</span> &#125;</span><br><span class="line">  -re <span class="string">&quot;.*Attached&quot;</span> &#123; send <span class="string">&quot;screen -x <span class="variable">$username</span>\r&quot;</span> &#125;</span><br><span class="line">  -re <span class="string">&quot;/var/run/screen&quot;</span> &#123; send <span class="string">&quot;screen -dmS <span class="variable">$username</span>; screen -r <span class="variable">$username</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录后的环境直接交给用户</span></span><br><span class="line">interact</span><br></pre></td></tr></table></div></figure><blockquote><p>exp_continue可以理解为for/while的continue，Expect可以看作重新执行expect匹配</p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Linux终端需要做模拟人工输入，或一些自动化交互时可以使用Expect脚本实现，本文主要介绍其基本用法和经过探索总结的技巧</summary>
    
    
    
    <category term="工具" scheme="http://www.rainmote.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="自动化" scheme="http://www.rainmote.cn/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="效率" scheme="http://www.rainmote.cn/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="Devops" scheme="http://www.rainmote.cn/tags/Devops/"/>
    
    <category term="Linux" scheme="http://www.rainmote.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>用Python优雅的封装Upsource HTTP API</title>
    <link href="http://www.rainmote.cn/2020/04/28/Upsource-HTTP-API-python/"/>
    <id>http://www.rainmote.cn/2020/04/28/Upsource-HTTP-API-python/</id>
    <published>2020-04-28T11:36:31.000Z</published>
    <updated>2021-08-23T02:39:30.837Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="背景"   >          <a href="#背景" class="heading-link"><i class="fas fa-link"></i></a><a href="#背景" class="headerlink" title="背景"></a>背景</h1>      <p>Upsource是一个非常出色的CodeReview工具，在和其他系统联动时需要通过API进行访问，于是使用python对其API进行封装，过程中一步一步思考如何使用python装饰器简化封装，达到十分简洁的封装。<br>本文主要介绍利用动态生成函数和装饰器两种方法简化API封装的实现。</p>        <h1 id="Upsource-HTTP-API说明"   >          <a href="#Upsource-HTTP-API说明" class="heading-link"><i class="fas fa-link"></i></a><a href="#Upsource-HTTP-API说明" class="headerlink" title="Upsource HTTP API说明"></a>Upsource HTTP API说明</h1>      <figure class="highlight stata"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Upsource API is <span class="keyword">an</span> RPC-style HTTP API. You can make calls using HTTP GET and <span class="keyword">POST</span>. All data is sent and received <span class="keyword">as</span> JSON. <span class="keyword">While</span> the RPC methods don&#x27;t enforce the <span class="keyword">use</span> of a specific HTTP method, we recommend that you conform to HTTP semantics <span class="keyword">by</span> using GET <span class="keyword">for</span> retrieving data (<span class="keyword">e</span>.<span class="keyword">g</span>. getRevisionsList) and <span class="keyword">POST</span> <span class="keyword">for</span> modifying data (<span class="keyword">e</span>.<span class="keyword">g</span>. createReview).</span><br><span class="line"></span><br><span class="line">All timestamps are Unix timestamps, the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).</span><br><span class="line"></span><br><span class="line">To invoke a method of the Upsource API using HTTP GET, make the following request:</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//your-upsource-host/~rpc/methodName?params=&#123;JSON-encoded-params&#125;</span></span><br><span class="line">To make a <span class="keyword">POST</span> request, <span class="keyword">use</span> the same URL but pass the request payload <span class="keyword">in</span> the <span class="keyword">POST</span> body instead. A Content-<span class="keyword">Type</span> of application/json should be <span class="keyword">set</span>.</span><br></pre></td></tr></table></div></figure><p>根据文档描述，每个接口的调用包含methodName和JSON格式的参数，于是我们开始用python进行封装。</p>        <h1 id="简单实现"   >          <a href="#简单实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1>      <p>最简单的就是实现就是每个API加个函数</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upsource</span>:</span></span><br><span class="line">    ENDPOINT = <span class="string">&quot;https://upsource.xxxx.com&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, user, passwd, retry_times = <span class="number">3</span></span>):</span></span><br><span class="line">        self.__auth = HTTPBasicAuth(user, passwd)</span><br><span class="line">        self.retry_times = retry_times</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTP请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_request</span>(<span class="params">self, rpc_name, data</span>):</span></span><br><span class="line">        suffix = <span class="string">&#x27;/~rpc/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(rpc_name)</span><br><span class="line">        url = self.ENDPOINT + re.sub(<span class="string">&#x27;/+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, suffix)</span><br><span class="line"></span><br><span class="line">        headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>&#125;</span><br><span class="line">        proxies = &#123; <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>, <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line">        retry = self.retry_times</span><br><span class="line"></span><br><span class="line">        info(<span class="string">&#x27;&#123;&#125;, request: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(rpc_name, data))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> retry &gt; <span class="number">0</span>:</span><br><span class="line">            retry -= <span class="number">1</span></span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                resp = requests.post(url, data=json.dumps(data), auth=self.__auth, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">and</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">                    <span class="keyword">return</span> json.loads(resp.text)[<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&#x27;request failed&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error(<span class="string">&#x27;request upsource failed!, rpc_name: &#123;&#125;, request: &#123;&#125;, resp: &#123;&#125;, error:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(rpc_name, data, resp.text, <span class="built_in">str</span>(e)))</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># getBranchInfo</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_branch_info</span>(<span class="params">self, project_id, branch</span>):</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;projectId&#x27;</span>: project_id,</span><br><span class="line">                <span class="string">&#x27;branch&#x27;</span>: branch&#125;</span><br><span class="line">        <span class="keyword">return</span> self._request(<span class="string">&#x27;getBranchInfo&#x27;</span>, data)</span><br></pre></td></tr></table></div></figure><p>上述实现每个API都需要实现一个函数做转换，有没有优化的空间？<br>下面我们介绍两种方法进行优化：</p><ul><li>动态生成函数</li><li>装饰器</li></ul>        <h1 id="动态生成函数"   >          <a href="#动态生成函数" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态生成函数" class="headerlink" title="动态生成函数"></a>动态生成函数</h1>              <h2 id="核心思路"   >          <a href="#核心思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2>      <p>python使用<code>locals()</code>可以获取当前上下文<br><code>exec()</code>可以执行在字符串中的python代码，所以可以动态生成函数，然后利用<code>setattr()</code>将生成的函数</p>        <h2 id="实现探索"   >          <a href="#实现探索" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现探索" class="headerlink" title="实现探索"></a>实现探索</h2>      <p>我们可以利用下划线转驼峰，将参数名的转换做优化，配合locals()获取参数列表<br>下划线转驼峰函数</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">underline2hump</span>(<span class="params">underline_str</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([x.capitalize() <span class="keyword">for</span> x <span class="keyword">in</span> underline_str.split(<span class="string">&#x27;_&#x27;</span>) <span class="keyword">if</span> x])</span><br></pre></td></tr></table></div></figure><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_branch_info</span>(<span class="params">project_id, branch</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_branch_info(<span class="string">&quot;123456&quot;</span>, <span class="string">&quot;master&quot;</span>)</span><br><span class="line">&#123;<span class="string">&#x27;project_id&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;branch&#x27;</span>: <span class="string">&#x27;master&#x27;</span>&#125;</span><br></pre></td></tr></table></div></figure><p>于是，每个API函数可以优化成这样</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_branch_info</span>(<span class="params">self, project_id, branch</span>):</span></span><br><span class="line">    m = <span class="built_in">locals</span>()</span><br><span class="line">    m.pop(<span class="string">&#x27;self&#x27;</span>)</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> iteritems(m):</span><br><span class="line">        data[underline2hump(k)] = v</span><br><span class="line">    <span class="keyword">return</span> self._request(underline2hump(__name__), data)</span><br></pre></td></tr></table></div></figure><p>函数体变成公共的了， 所以我们可以再写个公共函数，这样每个API都可以调用这个公共函数</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, data</span>):</span></span><br><span class="line">    rpc_name = sys._getframe(<span class="number">1</span>).f_code.co_name</span><br><span class="line">    resp = self._request(rpc_name, data)</span><br><span class="line">    info(pprint.pformat(resp))</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></div></figure><p>每个API函数调用<code>request</code>， 获取上一层调用名，请求参数透传；<br><strong>注意: 这里不能用locals()，应为locals只是针对调用栈的本层命名空间，暂时没找到方法获取上一层调用函数的参数列表</strong><br>所以每个API函数应该都有如下函数体</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_name</span>(<span class="params">self, params1, params2, ...</span>):</span></span><br><span class="line">    m = <span class="built_in">locals</span>();</span><br><span class="line">    m.pop(<span class="string">&#x27;self&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> self.request(m);</span><br></pre></td></tr></table></div></figure><p>我们可以利用python的<code>exec()</code>将字符串代码执行，这样我们就可以动态生成形如上述格式的函数，并且函数名和参数可变</p><figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">REQUEST_MAP = &#123;</span><br><span class="line">    <span class="string">&#x27;getProjectInfo&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;getCodeReviewPatterns&#x27;</span>: [],</span><br><span class="line">    <span class="string">&#x27;getRevisionsList&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;skip = 0&#x27;</span>, <span class="string">&#x27;requestGraph = False&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;getRevisionsListFiltered&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;skip = 0&#x27;</span>, <span class="string">&#x27;requestGraph = False&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;getRevisionInfo&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;revisionId&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;getBranchInfo&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;branch&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;getBranchGraph&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;branch&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;getBranches&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;sortBy = &quot;updated&quot;&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;findCommits&#x27;</span>: [<span class="string">&#x27;commits&#x27;</span>, <span class="string">&#x27;requestChanges = False&#x27;</span>, <span class="string">&#x27;limit = 10&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;getReviews&#x27;</span>: [<span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;query = &quot;*&quot;&#x27;</span>, <span class="string">&#x27;sortBy = &quot;updated&quot;&#x27;</span>, <span class="string">&#x27;projectId = &quot;herohub-platform&quot;&#x27;</span>, <span class="string">&#x27;skip = 0&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># dynamic gen class function from REQUEST_MAP</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> self.REQUEST_MAP.items():</span><br><span class="line">    fn_str = <span class="string">&#x27;&#x27;&#x27;def &#123;&#125;(self, &#123;&#125;): m = locals(); m.pop(&#x27;self&#x27;); return self.request(m);&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(k, <span class="string">&#x27;, &#x27;</span>.join(v))</span><br><span class="line">    info(<span class="string">&#x27;class: &#123;&#125;, gen function: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.__class__.__name__, fn_str))</span><br><span class="line">    <span class="built_in">exec</span>(fn_str)</span><br><span class="line">    <span class="built_in">setattr</span>(Upsource, k, <span class="built_in">locals</span>().get(k))</span><br></pre></td></tr></table></div></figure><p>由此，我们只需要修改REQUEST_MAP就能实现API封装。<br>这个实现有个小缺点：由于函数是运行时生成的，所以编辑器没法索引定义，可能导致误报。</p>        <h1 id="使用装饰器进行优化"   >          <a href="#使用装饰器进行优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用装饰器进行优化" class="headerlink" title="使用装饰器进行优化"></a>使用装饰器进行优化</h1>              <h2 id="核心思路-1"   >          <a href="#核心思路-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#核心思路-1" class="headerlink" title="核心思路"></a>核心思路</h2>      <p>利用装饰器+inspect库获取函数参数名及参数值，进行参数预处理，然后进行调用</p>        <h2 id="实现探索-1"   >          <a href="#实现探索-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现探索-1" class="headerlink" title="实现探索"></a>实现探索</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;locals: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">locals</span>()))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;args: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(args))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;kw: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(kw))</span><br><span class="line">        spec = inspect.getfullargspec(func)</span><br><span class="line">        <span class="built_in">print</span>(spec)</span><br><span class="line">        </span><br><span class="line">        data = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> idx, k <span class="keyword">in</span> <span class="built_in">enumerate</span>(spec.args):</span><br><span class="line">            <span class="keyword">if</span> idx &gt;= <span class="built_in">len</span>(args):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            data[k] = args[idx]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> idx, k <span class="keyword">in</span> <span class="built_in">enumerate</span>(spec.args[<span class="built_in">len</span>(args):]):</span><br><span class="line">            data[k] = spec.defaults[idx]</span><br><span class="line">            </span><br><span class="line">        method = <span class="built_in">getattr</span>(data[<span class="string">&#x27;self&#x27;</span>], <span class="string">&#x27;request_internal&#x27;</span>)</span><br><span class="line">        self = data.pop(<span class="string">&#x27;self&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> method(func.__name__, data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequestWrap</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_internal</span>(<span class="params">self, name, data</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;call request, name: &#123;&#125;, data: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, data))</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_branch_info</span>(<span class="params">self, project_id, branch_name</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_branch_info2</span>(<span class="params">self, project_id, branch_name=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">h = HttpRequestWrap()</span><br><span class="line">h.get_branch_info(<span class="string">&quot;123456&quot;</span>, <span class="string">&quot;master&quot;</span>)</span><br><span class="line"><span class="built_in">locals</span>: &#123;<span class="string">&#x27;args&#x27;</span>: (&lt;__main__.HttpRequestWrap <span class="built_in">object</span> at <span class="number">0x10fd5b450</span>&gt;, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;master&#x27;</span>), <span class="string">&#x27;kw&#x27;</span>: &#123;&#125;, <span class="string">&#x27;func&#x27;</span>: &lt;function HttpRequestWrap.get_branch_info at <span class="number">0x10fd5a4d0</span>&gt;&#125;</span><br><span class="line">args: (&lt;__main__.HttpRequestWrap <span class="built_in">object</span> at <span class="number">0x10fd5b450</span>&gt;, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;master&#x27;</span>)</span><br><span class="line">kw: &#123;&#125;</span><br><span class="line">FullArgSpec(args=[<span class="string">&#x27;self&#x27;</span>, <span class="string">&#x27;project_id&#x27;</span>, <span class="string">&#x27;branch_name&#x27;</span>], varargs=<span class="literal">None</span>, varkw=<span class="literal">None</span>, defaults=<span class="literal">None</span>, kwonlyargs=[], kwonlydefaults=<span class="literal">None</span>, annotations=&#123;&#125;)</span><br><span class="line">call request, name: get_branch_info, data: &#123;<span class="string">&#x27;project_id&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;branch_name&#x27;</span>: <span class="string">&#x27;master&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">h.get_branch_info2(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line"><span class="built_in">locals</span>: &#123;<span class="string">&#x27;args&#x27;</span>: (&lt;__main__.HttpRequestWrap <span class="built_in">object</span> at <span class="number">0x10fd5b450</span>&gt;, <span class="string">&#x27;123456&#x27;</span>), <span class="string">&#x27;kw&#x27;</span>: &#123;&#125;, <span class="string">&#x27;func&#x27;</span>: &lt;function HttpRequestWrap.get_branch_info2 at <span class="number">0x10fd5a680</span>&gt;&#125;</span><br><span class="line">args: (&lt;__main__.HttpRequestWrap <span class="built_in">object</span> at <span class="number">0x10fd5b450</span>&gt;, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">kw: &#123;&#125;</span><br><span class="line">FullArgSpec(args=[<span class="string">&#x27;self&#x27;</span>, <span class="string">&#x27;project_id&#x27;</span>, <span class="string">&#x27;branch_name&#x27;</span>], varargs=<span class="literal">None</span>, varkw=<span class="literal">None</span>, defaults=(<span class="string">&#x27;&#x27;</span>,), kwonlyargs=[], kwonlydefaults=<span class="literal">None</span>, annotations=&#123;&#125;)</span><br><span class="line">call request, name: get_branch_info2, data: &#123;<span class="string">&#x27;project_id&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;branch_name&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="完整代码"   >          <a href="#完整代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1>              <h2 id="动态生成"   >          <a href="#动态生成" class="heading-link"><i class="fas fa-link"></i></a><a href="#动态生成" class="headerlink" title="动态生成"></a>动态生成</h2>      <figure class="highlight python"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> log <span class="keyword">import</span> debug, info, warning, error, fatal</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upsource</span>:</span></span><br><span class="line">    ENDPOINT = <span class="string">&quot;https://upsource.xxxx.com&quot;</span></span><br><span class="line"></span><br><span class="line">    REQUEST_MAP = &#123;</span><br><span class="line">        <span class="string">&#x27;getProjectInfo&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;getCodeReviewPatterns&#x27;</span>: [],</span><br><span class="line">        <span class="string">&#x27;getRevisionsList&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;skip = 0&#x27;</span>, <span class="string">&#x27;requestGraph = False&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;getRevisionsListFiltered&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;skip = 0&#x27;</span>, <span class="string">&#x27;requestGraph = False&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;getRevisionInfo&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;revisionId&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;getBranchInfo&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;branch&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;getBranchGraph&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;branch&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;getBranches&#x27;</span>: [<span class="string">&#x27;projectId&#x27;</span>, <span class="string">&#x27;query&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;sortBy = &quot;updated&quot;&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;findCommits&#x27;</span>: [<span class="string">&#x27;commits&#x27;</span>, <span class="string">&#x27;requestChanges = False&#x27;</span>, <span class="string">&#x27;limit = 10&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;getReviews&#x27;</span>: [<span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;query = &quot;*&quot;&#x27;</span>, <span class="string">&#x27;sortBy = &quot;updated&quot;&#x27;</span>, <span class="string">&#x27;projectId = &quot;herohub-platform&quot;&#x27;</span>, <span class="string">&#x27;skip = 0&#x27;</span>],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, user, passwd, retry_times = <span class="number">3</span></span>):</span></span><br><span class="line">        self.__auth = HTTPBasicAuth(user, passwd)</span><br><span class="line">        self.retry_times = retry_times</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dynamic gen class function from REQUEST_MAP</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.REQUEST_MAP.items():</span><br><span class="line">            fn_str = <span class="string">&#x27;&#x27;&#x27;def &#123;&#125;(self, &#123;&#125;): m = locals(); m.pop(&#x27;self&#x27;); return self.request(m);&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(k, <span class="string">&#x27;, &#x27;</span>.join(v))</span><br><span class="line">            info(<span class="string">&#x27;class: &#123;&#125;, gen function: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.__class__.__name__, fn_str))</span><br><span class="line">            <span class="built_in">exec</span>(fn_str)</span><br><span class="line">            <span class="built_in">setattr</span>(Upsource, k, <span class="built_in">locals</span>().get(k))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_request</span>(<span class="params">self, rpc_name, data</span>):</span></span><br><span class="line">        suffix = <span class="string">&#x27;/~rpc/&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(rpc_name)</span><br><span class="line">        url = self.ENDPOINT + re.sub(<span class="string">&#x27;/+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, suffix)</span><br><span class="line"></span><br><span class="line">        headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>&#125;</span><br><span class="line">        proxies = &#123; <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>, <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line">        retry = self.retry_times</span><br><span class="line"></span><br><span class="line">        info(<span class="string">&#x27;&#123;&#125;, request: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(rpc_name, data))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> retry &gt; <span class="number">0</span>:</span><br><span class="line">            retry -= <span class="number">1</span></span><br><span class="line">            resp = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                resp = requests.post(url, data=json.dumps(data), auth=self.__auth, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">and</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">                    <span class="keyword">return</span> json.loads(resp.text)[<span class="string">&#x27;result&#x27;</span>]</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&#x27;request failed&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error(<span class="string">&#x27;request upsource failed!, rpc_name: &#123;&#125;, request: &#123;&#125;, resp: &#123;&#125;, error:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(rpc_name, data, resp.text, <span class="built_in">str</span>(e)))</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        rpc_name = sys._getframe(<span class="number">1</span>).f_code.co_name</span><br><span class="line">        resp = self._request(rpc_name, data)</span><br><span class="line">        info(pprint.pformat(resp))</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAllProjects</span>(<span class="params">self, projectIdList</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.request(&#123;<span class="string">&#x27;projectId&#x27;</span>: projectIdList&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    up = Upsource(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">    up.getProjectInfo(<span class="string">&quot;herohub-platform&quot;</span>)</span><br><span class="line">    up.getReviews(<span class="number">1000</span>, <span class="string">&#x27;branch:feature/20200316 and state: open&#x27;</span>)</span><br></pre></td></tr></table></div></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">Upsource是一个非常出色的CodeReview工具, 本文主要介绍如何使用Python优雅的封装其API</summary>
    
    
    
    <category term="python" scheme="http://www.rainmote.cn/categories/python/"/>
    
    
    <category term="编程" scheme="http://www.rainmote.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="python" scheme="http://www.rainmote.cn/tags/python/"/>
    
    <category term="upsource" scheme="http://www.rainmote.cn/tags/upsource/"/>
    
  </entry>
  
  <entry>
    <title>路漫漫其修远兮，吾将上下而求索</title>
    <link href="http://www.rainmote.cn/2019/09/12/current/"/>
    <id>http://www.rainmote.cn/2019/09/12/current/</id>
    <published>2019-09-12T00:08:08.000Z</published>
    <updated>2021-08-23T06:46:27.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote mindmap mindmap-md"><ul><li>我的探索<ul><li>绘图<ul><li>文本绘图<ul><li>mermaid: 封装graphviz</li><li>GraphEasy: 生成ascii流程图，很酷且高效</li></ul></li></ul></li><li>值得你了解的工具<ul><li>Marp: 使用markdown写ppt</li><li>Notion: 迄今为止最好用的笔记软件</li><li>Anytype: 仿照notion，以web3为基础，开源，可私有部署</li><li>Hammerspoon: MAC上强大的自动化工具<ul><li>使用lua封装了系统层api，可以非常简单、高效实现自动化</li><li>功能包括且不限于：<ul><li>窗口管理（多屏幕移动）</li><li>剪贴板</li><li>全局快捷键</li><li>自动化脚本</li><li>控制wifi/蓝牙</li><li>dock显示信息，资讯/githubPR/天气预报</li><li>……</li></ul></li><li>可以让你少买很多软件;用了就无法自拔的神器</li></ul></li><li>spacehammer: 一个好用的Hammerspoon的配置库<ul><li>使用仿clojure的Fennel语言编写，利用Lisp强大的表达能力，语法非常简洁优美</li><li>仿spacemacs的操作方式，上手十分简单，处处有提示</li></ul></li><li>Kodi: 家庭影音中心<ul><li>可以配置直播源，有网就能看电视，可以配置全球电视源</li><li>可以集成app，直接访问网络资源，如优酷，百度云等</li><li>Mac上安装，局域网看视频；支持丰富的视频格式</li><li>一个树莓派，让普通电视智能化</li></ul></li></ul></li><li>智能家居<ul><li>NAS</li><li>HomeAssistant</li><li>硬件设备<ul><li>小米系列</li><li>峥果：浴霸,墙壁开关改造的最佳之选</li></ul></li></ul></li><li>编程<ul><li>语言推荐<ul><li>clojure</li><li>haskell</li></ul></li><li>工具<ul><li>shellcheck: 你的shell脚本老师</li><li>postgrest: pg数据的cp，直接提供restAPI</li></ul></li></ul></li><li>Devops<ul><li>CI<ul><li>jenkins</li><li>gerrit</li></ul></li><li>CD<ul><li>k8s</li></ul></li><li>Other<ul><li>airflow</li></ul></li></ul></li></ul></li></ul></blockquote>        <h1 id="我的状态"   >          <a href="#我的状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#我的状态" class="headerlink" title="我的状态"></a>我的状态</h1>              <h2 id="2020年"   >          <a href="#2020年" class="heading-link"><i class="fas fa-link"></i></a><a href="#2020年" class="headerlink" title="2020年"></a>2020年</h2>              <h3 id="01月"   >          <a href="#01月" class="heading-link"><i class="fas fa-link"></i></a><a href="#01月" class="headerlink" title="01月"></a>01月</h3>              <h4 id="智能家居"   >          <a href="#智能家居" class="heading-link"><i class="fas fa-link"></i></a><a href="#智能家居" class="headerlink" title="智能家居"></a>智能家居</h4>      <ul><li>将峥果浴霸刷上开源的固件，接入homeassistant；单火墙壁开关固件dump出来，尝试分析</li><li>小米万能遥控器音箱，拆卸找到ttl，无法用过ttl进入shell，可能封堵了串口gettty，待继续探索解决方案</li><li>春节<del>.</del></li></ul>        <h3 id="02月"   >          <a href="#02月" class="heading-link"><i class="fas fa-link"></i></a><a href="#02月" class="headerlink" title="02月"></a>02月</h3>              <h4 id="效率工具"   >          <a href="#效率工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h4>      <ul><li>Mac升级，键盘映射失效，shift切换中英文失效，折腾时顺便捡起了hammerspoon；spacehammer真是相见很晚的库，可以用“Clojure”来写mac自动化工具，兴奋至极！</li></ul>        <h3 id="03月"   >          <a href="#03月" class="heading-link"><i class="fas fa-link"></i></a><a href="#03月" class="headerlink" title="03月"></a>03月</h3>              <h4 id="小米音箱万能遥控版折腾"   >          <a href="#小米音箱万能遥控版折腾" class="heading-link"><i class="fas fa-link"></i></a><a href="#小米音箱万能遥控版折腾" class="headerlink" title="小米音箱万能遥控版折腾"></a>小米音箱万能遥控版折腾</h4>      <ul><li>年前沟通了一台本来打算接入homeassistant，奈何网上都是小爱版，没有带红外功能的；拆解ttl连接无法进入shell，从信息可以得到芯片是全志A33，尝试从FEL模式提取固件失败。</li></ul>        <h4 id="IPFS"   >          <a href="#IPFS" class="heading-link"><i class="fas fa-link"></i></a><a href="#IPFS" class="headerlink" title="IPFS"></a>IPFS</h4>      <p>Filecoin今年即将迎来主网上线，作为区块链在web3.0时代重要应用之一，未来必将成为一大热门，所以提前关注。了解ipfs，关注社区动态。</p>        <h3 id="11月"   >          <a href="#11月" class="heading-link"><i class="fas fa-link"></i></a><a href="#11月" class="headerlink" title="11月"></a>11月</h3>      <p>家里新买了加湿器和踢脚线，想着用红外传感器接入HA做控制，淘宝上买了模组，刷入开源固件，能够测试通过，但是便捷性不高；另外对于温湿度的反馈也依赖了设备是否有红外反馈，踢脚线的有红外响应但是无法解析，还待进一步研究。<br>后来买了BroadLink RM PRO4万能遥控器，能够控制但是无法得到反馈，使用过程无法温度设置了多少，湿度设置了多少，还待进一步折腾。</p>        <h2 id="2021年"   >          <a href="#2021年" class="heading-link"><i class="fas fa-link"></i></a><a href="#2021年" class="headerlink" title="2021年"></a>2021年</h2>              <h3 id="07月"   >          <a href="#07月" class="heading-link"><i class="fas fa-link"></i></a><a href="#07月" class="headerlink" title="07月"></a>07月</h3>      <p>学习Mac逆向相关技术</p><!-- 访问非常慢<iframe width="1200" height="800" frameborder="0" src="https://www.mindmeister.com/maps/public_map_shell/1327105969/_?width=1200&height=800&z=auto&t=NjbQUruQ8W" scrolling="no" style="overflow: hidden; margin-bottom: 5px;">您目前的浏览器无法显示框架元素。请访问MindMeister上的<span class="exturl"><a class="exturl__link"   href="https://www.mindmeister.com/1327105969/_?t=NjbQUruQ8W"  target="_blank">我的技能树</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>页面。</iframe><div class="mb-5"><span class="exturl"><a class="exturl__link"   href="https://www.mindmeister.com/1327105969/_?t=NjbQUruQ8W"  target="_blank">我的技能树</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 作者 <span class="exturl"><a class="exturl__link"   href="https://www.mindmeister.com/users/channel/39950735"  target="_blank">rainmote</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></div>--><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">我的技术探索地图、记录， 好用的工具，高效的学习工作</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2018年度学习总结</title>
    <link href="http://www.rainmote.cn/2019/01/23/2018-learning-summay/"/>
    <id>http://www.rainmote.cn/2019/01/23/2018-learning-summay/</id>
    <published>2019-01-22T16:33:05.000Z</published>
    <updated>2021-08-23T02:39:30.837Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="2018年度业余学习总结"   >          <a href="#2018年度业余学习总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#2018年度业余学习总结" class="headerlink" title="2018年度业余学习总结"></a>2018年度业余学习总结</h1>      <p>回首2018，时间如此之快；今年工作之余的学习也有较多收获，故予以总结，一来以便回顾查漏补缺，二来制定明年学习计划。</p><p>备注：本篇只总结业余时间的学习，工作相关的不便公开。</p>        <h1 id="年度知识关键词"   >          <a href="#年度知识关键词" class="heading-link"><i class="fas fa-link"></i></a><a href="#年度知识关键词" class="headerlink" title="年度知识关键词"></a>年度知识关键词</h1>      <p>Clojure DNS协议 数据可视化 IoT数字电路 移动端开发 NAS 全栈 Postgresql 黎曼猜想</p>        <h1 id="学习总结"   >          <a href="#学习总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1>              <h2 id="clojure"   >          <a href="#clojure" class="heading-link"><i class="fas fa-link"></i></a><a href="#clojure" class="headerlink" title="clojure"></a>clojure</h2>      <p>学习使用clojure+clojurescript进行全栈开发，实现了单页面应用基本网站架构，和较为复杂的页面查询。完成了两个网页：工作的一些测试工具展示；自己的个人工具集网站。</p><!-- more -->        <h3 id="cljsrn"   >          <a href="#cljsrn" class="heading-link"><i class="fas fa-link"></i></a><a href="#cljsrn" class="headerlink" title="cljsrn"></a>cljsrn</h3>      <p>使用clojurescript+react native编写app，计划做个手机APP来将照片加密上传存储在OSS或者S3，目前进度是完成了初步的页面，主要的加密、上传功能还没有开始做。</p>        <h3 id="使用gloss库进行网络协议开发"   >          <a href="#使用gloss库进行网络协议开发" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用gloss库进行网络协议开发" class="headerlink" title="使用gloss库进行网络协议开发"></a>使用<strong>gloss</strong>库进行网络协议开发</h3>      <p>为了获取单个域名CDN节点，想法是搜集全国的DNS服务器，然后向这些DNS服务发起查询请求，得到CDN节点。由于DNS协议比较奇葩，目前gloss库对这种可变头部决定后续内容，目前实现了构造数据包，对于响应包解析还存在问题，目前gloss库作者已经不再维护，后续有时间可以再研究下这个问题。</p>        <h3 id="luminus"   >          <a href="#luminus" class="heading-link"><i class="fas fa-link"></i></a><a href="#luminus" class="headerlink" title="luminus"></a>luminus</h3>      <p>clojure luminus非常好用， 可以直接生成一个包含各个组件的应用。</p><p><span class="exturl"><a class="exturl__link"   href="http://www.luminusweb.net/" >http://www.luminusweb.net/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>书写自己的工具时使用了postgresql，发现其非常好用，不仅和mongodb一样，支持存储json格式，而且和mysql一样， 是关系型数据库。</p>        <h3 id="管道数据流思想"   >          <a href="#管道数据流思想" class="heading-link"><i class="fas fa-link"></i></a><a href="#管道数据流思想" class="headerlink" title="管道数据流思想"></a>管道数据流思想</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://github.com/linpengcheng/PurefunctionPipelineDataflow" >https://github.com/linpengcheng/PurefunctionPipelineDataflow</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>使用该思想，可以方便的将代码结构简化，但是入门时还是总是会不自觉的将代码复杂度提高，需要不断练习、体会。</p>        <h2 id="IoT"   >          <a href="#IoT" class="heading-link"><i class="fas fa-link"></i></a><a href="#IoT" class="headerlink" title="IoT"></a>IoT</h2>      <p>IoT本年度主要思考智能家居方面，从去年的尝试模拟身份证ID，想着直接拆解室内终端，尝试监听电路信号，模拟重放开门信号；发现了数字分析仪，于是购买了Digilent OpenScope MZ，直接连接在线路上，没做任何保护，结果就是烧毁了。</p><p>后来又发现了物美价廉的DsLogic数字分析仪，于是入手一个，采集信号后，利用树莓派模拟发现信号电压不够，多试了几次发现树莓派也被烧毁了……</p><p>和同学聊天中知晓了些电路知识，发现自己这块还是空白，于是找了麻省理工的数字电路公开课，学习第一节就明显感觉牛逼学校教授知识确实很赞，从基本的电路知识，一层一层介绍了后续知识的拓展，描绘出了数字电路一层一层抽象发展出的计算机学科。</p>        <h1 id="好用的工具"   >          <a href="#好用的工具" class="heading-link"><i class="fas fa-link"></i></a><a href="#好用的工具" class="headerlink" title="好用的工具"></a>好用的工具</h1>      <ul><li>Explainshell</li></ul><p>好用的Linux命令参数解释工具，对于复杂命令可以拆解理解。</p><p>示例:<br><span class="exturl"><a class="exturl__link"   href="https://explainshell.com/explain?cmd=git+log+--all+--graph+--decorate+--oneline+--simplify-by-decoration" >https://explainshell.com/explain?cmd=git+log+–all+–graph+–decorate+–oneline+–simplify-by-decoration</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><ul><li>graph-easy</li></ul><p>生成ascii图形，相比较graphviz，可以方便生成ascii图形，对于利用github搭建的静态博客，图片存储很麻烦，所以写博客时使用ascii图形表达更加方便。</p><ul><li>outline</li></ul><p>google的母公司出品，包装了ss，傻瓜式安装、配置、管理，多平台，非常方便。</p><p><span class="exturl"><a class="exturl__link"   href="https://www.getoutline.org/" >https://www.getoutline.org/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（需要梯子）</p><ul><li>Notion</li></ul><p>用过的最好的笔记软件</p>        <h1 id="Other"   >          <a href="#Other" class="heading-link"><i class="fas fa-link"></i></a><a href="#Other" class="headerlink" title="Other"></a>Other</h1>              <h2 id="黎曼猜想"   >          <a href="#黎曼猜想" class="heading-link"><i class="fas fa-link"></i></a><a href="#黎曼猜想" class="headerlink" title="黎曼猜想"></a>黎曼猜想</h2>      <p>黎曼猜想被证明可谓是一大新闻。</p><p>业余买了两本相关书籍，大概了解了黎曼猜想讲了什么，但是其中很多概念不了解。</p><p>比如虚数，之前学习的时候记得规定i的平方是-1，但是为什么是这样的呢？当查阅资料了解更多时，就会发现数学发展与人类进步密切相关。</p><p>从最开始的正整数1、2、3……，到加入0后的自然数，再到负数，然后到有理数（3/5等），接着到无理数（根号2），已经到了实数域。</p><p>可以将复数看作为一种工具，它的引入是为了解决问题。那么为什么是引入这样的，而不是那样的？</p><p>关于复数的引入，可在网上找到很多文章</p><p>比如：<span class="exturl"><a class="exturl__link"   href="http://www.ruanyifeng.com/blog/2012/09/imaginary_number.html" >http://www.ruanyifeng.com/blog/2012/09/imaginary_number.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      <p>2018年相比2017年学到的东西深入了一点，这一年业余主要写clojure，但是很多项目都比较零碎，目前正在做的就是一个自己工具，将零碎的小工具整合，主要实现web页面，方便使用管理。<br>工作上的事情也颇多，较为好的一点是做自己擅长且喜欢的工作了，心里压力小了很多；这也是利用业余时间能够学习更多的原因。</p><p>新的一年，继续整理自己工具，写clojure，折腾智能家居，顺便看看那些年不知道的所以然（数学为什么是这样的？），^_^</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">2018年度学习总结</summary>
    
    
    
    <category term="总结" scheme="http://www.rainmote.cn/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="年度总结" scheme="http://www.rainmote.cn/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>用Clojure将git log解析为json格式</title>
    <link href="http://www.rainmote.cn/2018/12/14/git-log-format-to-json/"/>
    <id>http://www.rainmote.cn/2018/12/14/git-log-format-to-json/</id>
    <published>2018-12-14T00:02:30.000Z</published>
    <updated>2021-08-23T02:39:30.836Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="背景"   >          <a href="#背景" class="heading-link"><i class="fas fa-link"></i></a><a href="#背景" class="headerlink" title="背景"></a>背景</h1>      <p>有时我们需要分析git提交历史，而git log支持–format选项，无法直接输出json，所以需要自己包装下。<br><span class="exturl"><a class="exturl__link"   href="https://git-scm.com/docs/git-log" >git-log文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="实现"   >          <a href="#实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现" class="headerlink" title="实现"></a>实现</h1>      <p>本示例使用<code>clojure</code>实现，我们可以看到其简洁、优美之处。</p><!--more-->        <h2 id="定义format选项"   >          <a href="#定义format选项" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义format选项" class="headerlink" title="定义format选项"></a>定义format选项</h2>      <p>格式化参数可以参考git log文档，</p><figure class="highlight clojure"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">defn</span> <span class="title">get-git-log-params</span> []</span><br><span class="line">  &#123;<span class="symbol">:commit</span> <span class="string">&quot;%H&quot;</span></span><br><span class="line">   <span class="symbol">:abbreviated-commit</span> <span class="string">&quot;%h&quot;</span></span><br><span class="line">   <span class="symbol">:tree</span> <span class="string">&quot;%T&quot;</span></span><br><span class="line">   <span class="symbol">:abbreviated-tree</span> <span class="string">&quot;%t&quot;</span></span><br><span class="line">   <span class="symbol">:parent</span> <span class="string">&quot;%P&quot;</span></span><br><span class="line">   <span class="symbol">:abbreviated-parent</span> <span class="string">&quot;%p&quot;</span></span><br><span class="line">   <span class="symbol">:refs</span> <span class="string">&quot;%D&quot;</span></span><br><span class="line">   <span class="symbol">:encoding</span> <span class="string">&quot;%e&quot;</span></span><br><span class="line">   <span class="symbol">:subject</span> <span class="string">&quot;%s&quot;</span></span><br><span class="line">   <span class="symbol">:body</span> <span class="string">&quot;%b&quot;</span></span><br><span class="line">   <span class="symbol">:commit-notes</span> <span class="string">&quot;%N&quot;</span></span><br><span class="line">   <span class="symbol">:author-name</span> <span class="string">&quot;%aN&quot;</span></span><br><span class="line">   <span class="symbol">:author-email</span> <span class="string">&quot;%aE&quot;</span></span><br><span class="line">   <span class="symbol">:author-date</span> <span class="string">&quot;%ai&quot;</span></span><br><span class="line">   <span class="symbol">:author-timestamp</span> <span class="string">&quot;%at&quot;</span></span><br><span class="line">   <span class="symbol">:committer-name</span> <span class="string">&quot;%cN&quot;</span></span><br><span class="line">   <span class="symbol">:committer-email</span> <span class="string">&quot;%cE&quot;</span></span><br><span class="line">   <span class="symbol">:committer-date</span> <span class="string">&quot;%ci&quot;</span></span><br><span class="line">   <span class="symbol">:committer-timestamp</span> <span class="string">&quot;%ct&quot;</span>&#125;)</span><br></pre></td></tr></table></div></figure>        <h2 id="格式化方式选择"   >          <a href="#格式化方式选择" class="heading-link"><i class="fas fa-link"></i></a><a href="#格式化方式选择" class="headerlink" title="格式化方式选择"></a>格式化方式选择</h2>      <p>我们需要格式化为json格式，format支持自定义格式，我们有两种方式可以选择：</p><ol><li><p>format参数直接包装为json格式<br>此种方式每个commit之后需要加个空格，最末尾的需要去除。<br>优点：直接得到json<br>缺点：某些字段内容包含引号，转义问题不容易解决</p></li><li><p>利用特殊分隔字符<br>我们将每个输出参数分隔，再将每个commit输出分隔，拿到输出后进行解析。<br>优点：不用考虑转义问题<br>缺点：实现略微复杂<br>不过我们利用<code>clojure</code>可以很方便实现。</p></li></ol>        <h2 id="需要用的小知识点"   >          <a href="#需要用的小知识点" class="heading-link"><i class="fas fa-link"></i></a><a href="#需要用的小知识点" class="headerlink" title="需要用的小知识点"></a>需要用的小知识点</h2>      <figure class="highlight clojure"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 字符串切分</span></span><br><span class="line">user=&gt; (<span class="name">clojure.string/split</span> <span class="string">&quot;a#&amp;b#&amp;c&quot;</span> (<span class="name">re-pattern</span> <span class="string">&quot;#&amp;&quot;</span>))</span><br><span class="line">[<span class="string">&quot;a&quot;</span> <span class="string">&quot;b&quot;</span> <span class="string">&quot;c&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">;; key和value组合为map</span></span><br><span class="line">user=&gt; (<span class="name"><span class="builtin-name">into</span></span> &#123;&#125; (<span class="name"><span class="builtin-name">mapv</span></span> vector [<span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>] [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]))</span><br><span class="line">&#123;<span class="symbol">:a</span> <span class="number">1</span>, <span class="symbol">:b</span> <span class="number">2</span>, <span class="symbol">:c</span> <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">;; map拆分为ks vs</span></span><br><span class="line">user=&gt; (<span class="name"><span class="builtin-name">apply</span></span> mapv vector (<span class="name"><span class="builtin-name">seq</span></span> *1))</span><br><span class="line">[[<span class="symbol">:a</span> <span class="symbol">:b</span> <span class="symbol">:c</span>] [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]]</span><br></pre></td></tr></table></div></figure>        <h2 id="实现步骤"   >          <a href="#实现步骤" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2>              <h3 id="定义分割符"   >          <a href="#定义分割符" class="heading-link"><i class="fas fa-link"></i></a><a href="#定义分割符" class="headerlink" title="定义分割符"></a>定义分割符</h3>      <figure class="highlight clojure"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">def</span> <span class="title">magic-item</span> <span class="string">&quot;&amp;=&amp;=&amp;=&amp;=&amp;=&amp;=&quot;</span>)</span><br><span class="line">(<span class="keyword">def</span> <span class="title">magic-line</span> <span class="string">&quot;#@#@#@#@#@#@&quot;</span>)</span><br></pre></td></tr></table></div></figure>        <h3 id="拆分参数并构造命令"   >          <a href="#拆分参数并构造命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#拆分参数并构造命令" class="headerlink" title="拆分参数并构造命令"></a>拆分参数并构造命令</h3>      <figure class="highlight clojure"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 这里用到了参数解构，线性宏</span></span><br><span class="line">(<span class="name"><span class="builtin-name">let</span></span> [[ks vs] (<span class="name"><span class="builtin-name">apply</span></span> mapv vector (<span class="name"><span class="builtin-name">seq</span></span> (<span class="name">get-git-log-params</span>)))]</span><br><span class="line">  (<span class="name"><span class="builtin-name">-&gt;</span></span> (<span class="name">clojure.string/join</span> magic-item vs)</span><br><span class="line">      (<span class="name"><span class="builtin-name">str</span></span> ,,, magic-line)</span><br><span class="line">      (<span class="name">#</span>(<span class="name"><span class="builtin-name">format</span></span> <span class="string">&quot;git log remotes/origin/%s --format=&#x27;%s&#x27;&quot;</span> branch-name %) ,,,)))</span><br></pre></td></tr></table></div></figure>        <h3 id="执行shell命令"   >          <a href="#执行shell命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h3>      <figure class="highlight clojure"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user=&gt; (<span class="name">require</span> &#x27;[clojure.java.shell <span class="symbol">:as</span> shell])</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">user=&gt; (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> (<span class="name">shell/sh</span> <span class="string">&quot;bash&quot;</span> <span class="string">&quot;-c&quot;</span> <span class="string">&quot;date&quot;</span>) <span class="symbol">:out</span>)</span><br><span class="line"><span class="string">&quot;Fri Dec 14 08:28:00 CST 2018\n&quot;</span></span><br></pre></td></tr></table></div></figure><p>这里使用<code>bash -c</code>是个小技巧，后面的命令可以可以放在一个字符串中处理。</p>        <h3 id="解析结果"   >          <a href="#解析结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#解析结果" class="headerlink" title="解析结果"></a>解析结果</h3>      <p>假设我们完成了上述步骤，将会得到如下格式的输出：</p><figure class="highlight clean"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa&amp;=&amp;=&amp;=&amp;=&amp;=&amp;=bbb&amp;=&amp;=&amp;=&amp;=&amp;=&amp;=ccc#@#@#@#@#@#@<span class="number">123</span>&amp;=&amp;=&amp;=&amp;=&amp;=&amp;=<span class="number">456</span>&amp;=&amp;=&amp;=&amp;=&amp;=&amp;=<span class="number">789</span>\n</span><br></pre></td></tr></table></div></figure><p>我们需要按照如下步骤解析：</p><ol><li>删除末尾换行</li><li>按照行分隔符切分</li><li>每行再按照列分隔符切分</li><li>组合key和切分后的内容</li></ol><p>具体实现如下：</p><figure class="highlight clojure"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> (<span class="name">clojure.java.shell/sh</span> <span class="string">&quot;bash&quot;</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">                   (<span class="name"><span class="builtin-name">-&gt;</span></span> (<span class="name">clojure.string/join</span> magic-item vs)</span><br><span class="line">                       (<span class="name"><span class="builtin-name">str</span></span> ,,, magic-line)</span><br><span class="line">                       (<span class="name">#</span>(<span class="name"><span class="builtin-name">format</span></span> <span class="string">&quot;git log remotes/origin/%s --format=&#x27;%s&#x27;&quot;</span> branch %) ,,,))</span><br><span class="line">                  <span class="symbol">:dir</span> code-path)</span><br><span class="line">     <span class="symbol">:out</span></span><br><span class="line">     clojure.string/trim-newline</span><br><span class="line">     <span class="comment">;; split output to line</span></span><br><span class="line">     (<span class="name">#</span>(<span class="name">clojure.string/split</span> % (<span class="name">re-pattern</span> magic-line)) ,,,)</span><br><span class="line">     <span class="comment">;; split line to item</span></span><br><span class="line">     (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">clojure.string/split</span> % (<span class="name">re-pattern</span> magic-item)) ,,,)</span><br><span class="line">     <span class="comment">;; combination ks and output into map</span></span><br><span class="line">     <span class="comment">;; [:a :b] [1 2] =&gt; &#123;:a 1 :b 2&#125;</span></span><br><span class="line">     (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name"><span class="builtin-name">into</span></span> &#123;&#125; (<span class="name"><span class="builtin-name">mapv</span></span> vector ks %)) ,,,)</span><br><span class="line">     <span class="comment">;; convert to json</span></span><br><span class="line">     (<span class="name">cheshire.core/generate-string</span> ,,,))</span><br></pre></td></tr></table></div></figure><blockquote><p>我们将默认的map改用pmap，即可多核并行处理，clojure就是如此简单。</p></blockquote>        <h1 id="完整实现"   >          <a href="#完整实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h1>      <p>见 <span class="exturl"><a class="exturl__link"   href="https://github.com/rainmote/blog-example/blob/master/git-log.clj" >https://github.com/rainmote/blog-example/blob/master/git-log.clj</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">使用git log做一些分析时，默认的命令对于提取信息比对可能不太方便，本文主要介绍如何利用clojure将git log的输出json化，以便于数据分析</summary>
    
    
    
    <category term="工具" scheme="http://www.rainmote.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="clojure" scheme="http://www.rainmote.cn/tags/clojure/"/>
    
    <category term="git" scheme="http://www.rainmote.cn/tags/git/"/>
    
    <category term="编程" scheme="http://www.rainmote.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
